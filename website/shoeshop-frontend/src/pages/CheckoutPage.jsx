import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Layout } from '../components';
import { useCart } from '../contexts';
import './CheckoutPage.css';

export default function CheckoutPage() {
  const navigate = useNavigate();
  const { items, getTotalPrice, clearCart } = useCart();
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    email: '',
    address: '',
    city: '',
    district: '',
    ward: '',
    note: '',
    shippingMethod: 'standard',
    paymentMethod: 'cod'
  });
  const [promoCode, setPromoCode] = useState('');
  const [discount, setDiscount] = useState(0);

  const shippingMethods = [
    { id: 'standard', name: 'Giao h√†ng ti√™u chu·∫©n', price: 30000, time: '3-5 ng√†y' },
    { id: 'express', name: 'Giao h√†ng nhanh', price: 50000, time: '1-2 ng√†y' },
    { id: 'super-express', name: 'Giao h√†ng si√™u t·ªëc', price: 80000, time: 'Trong ng√†y' }
  ];

  const paymentMethods = [
    { id: 'cod', name: 'Thanh to√°n khi nh·∫≠n h√†ng (COD)', icon: 'üíµ' },
    { id: 'bank-transfer', name: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng', icon: 'üè¶' },
    { id: 'momo', name: 'V√≠ MoMo', icon: 'üì±' },
    { id: 'zalopay', name: 'V√≠ ZaloPay', icon: 'üí≥' },
    { id: 'vnpay', name: 'VNPay', icon: 'üí≥' }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleApplyPromoCode = () => {
    const validCodes = {
      'CAMP50': { minOrder: 999000, discount: 50000 },
      'CAMP100': { minOrder: 1599000, discount: 100000 },
      'CAMP250': { minOrder: 2999000, discount: 250000 }
    };

    const code = validCodes[promoCode];
    if (code && getTotalPrice() >= code.minOrder) {
      setDiscount(code.discount);
      alert(`√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng! Gi·∫£m ${code.discount.toLocaleString()}‚Ç´`);
    } else if (code) {
      alert(`ƒê∆°n h√†ng t·ªëi thi·ªÉu ${code.minOrder.toLocaleString()}‚Ç´`);
    } else {
      alert('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá');
    }
  };

  const getShippingPrice = () => {
    const method = shippingMethods.find(m => m.id === formData.shippingMethod);
    return getTotalPrice() >= 500000 ? 0 : method?.price || 0;
  };

  const calculateFinalTotal = () => {
    return getTotalPrice() + getShippingPrice() - discount;
  };

  const handlePlaceOrder = (e) => {
    e.preventDefault();
    
    if (!formData.fullName || !formData.phone || !formData.address || !formData.city) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng');
      return;
    }

    if (items.length === 0) {
      alert('Gi·ªè h√†ng tr·ªëng');
      return;
    }

    const orderData = {
      customer: formData,
      items: items,
      subtotal: getTotalPrice(),
      shipping: getShippingPrice(),
      discount: discount,
      total: calculateFinalTotal(),
      promoCode: promoCode,
      orderDate: new Date().toISOString()
    };

    console.log('Order placed:', orderData);
    
    clearCart();
    navigate('/order-success', { state: { orderData } });
  };

  if (items.length === 0) {
    return (
      <Layout>
        <div className="checkout-page">
          <div className="container">
            <div className="empty-cart-message">
              <h2>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</h2>
              <button className="continue-shopping-btn" onClick={() => navigate('/home')}>
                Ti·∫øp t·ª•c mua s·∫Øm
              </button>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="checkout-page">
        <div className="breadcrumbs">
          <div className="container">
            <span className="breadcrumb-link" onClick={() => navigate('/home')}>Trang ch·ªß</span>
            <span className="breadcrumb-separator">/</span>
            <span className="breadcrumb-link" onClick={() => navigate('/cart')}>Gi·ªè h√†ng</span>
            <span className="breadcrumb-separator">/</span>
            <span className="breadcrumb-current">Thanh to√°n</span>
          </div>
        </div>

        <div className="checkout-container">
          <div className="container">
            <h1 className="checkout-title">Thanh to√°n</h1>
            
            <div className="checkout-layout">
              <div className="checkout-form-section">
                <form onSubmit={handlePlaceOrder}>
                  <div className="checkout-section">
                    <h2 className="section-title">Th√¥ng tin giao h√†ng</h2>
                    <div className="form-grid">
                      <div className="form-group full-width">
                        <label htmlFor="fullName">H·ªç v√† t√™n *</label>
                        <input
                          type="text"
                          id="fullName"
                          name="fullName"
                          value={formData.fullName}
                          onChange={handleInputChange}
                          placeholder="Nh·∫≠p h·ªç v√† t√™n"
                          required
                        />
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</label>
                        <input
                          type="tel"
                          id="phone"
                          name="phone"
                          value={formData.phone}
                          onChange={handleInputChange}
                          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                          required
                        />
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="email">Email</label>
                        <input
                          type="email"
                          id="email"
                          name="email"
                          value={formData.email}
                          onChange={handleInputChange}
                          placeholder="Nh·∫≠p email"
                        />
                      </div>
                      
                      <div className="form-group full-width">
                        <label htmlFor="address">ƒê·ªãa ch·ªâ *</label>
                        <input
                          type="text"
                          id="address"
                          name="address"
                          value={formData.address}
                          onChange={handleInputChange}
                          placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng"
                          required
                        />
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="city">T·ªânh/Th√†nh ph·ªë *</label>
                        <select
                          id="city"
                          name="city"
                          value={formData.city}
                          onChange={handleInputChange}
                          required
                        >
                          <option value="">Ch·ªçn T·ªânh/Th√†nh ph·ªë</option>
                          <option value="hanoi">H√† N·ªôi</option>
                          <option value="hcm">TP. H·ªì Ch√≠ Minh</option>
                          <option value="danang">ƒê√† N·∫µng</option>
                          <option value="haiphong">H·∫£i Ph√≤ng</option>
                          <option value="cantho">C·∫ßn Th∆°</option>
                        </select>
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="district">Qu·∫≠n/Huy·ªán</label>
                        <input
                          type="text"
                          id="district"
                          name="district"
                          value={formData.district}
                          onChange={handleInputChange}
                          placeholder="Nh·∫≠p Qu·∫≠n/Huy·ªán"
                        />
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="ward">Ph∆∞·ªùng/X√£</label>
                        <input
                          type="text"
                          id="ward"
                          name="ward"
                          value={formData.ward}
                          onChange={handleInputChange}
                          placeholder="Nh·∫≠p Ph∆∞·ªùng/X√£"
                        />
                      </div>
                      
                      <div className="form-group full-width">
                        <label htmlFor="note">Ghi ch√∫ ƒë∆°n h√†ng (t√πy ch·ªçn)</label>
                        <textarea
                          id="note"
                          name="note"
                          value={formData.note}
                          onChange={handleInputChange}
                          placeholder="Ghi ch√∫ v·ªÅ ƒë∆°n h√†ng, v√≠ d·ª•: th·ªùi gian hay ch·ªâ d·∫´n ƒë·ªãa ƒëi·ªÉm giao h√†ng chi ti·∫øt h∆°n."
                          rows="4"
                        ></textarea>
                      </div>
                    </div>
                  </div>

                  <div className="checkout-section">
                    <h2 className="section-title">Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn</h2>
                    <div className="shipping-methods">
                      {shippingMethods.map((method) => (
                        <label key={method.id} className="shipping-option">
                          <input
                            type="radio"
                            name="shippingMethod"
                            value={method.id}
                            checked={formData.shippingMethod === method.id}
                            onChange={handleInputChange}
                          />
                          <div className="shipping-info">
                            <div className="shipping-name">{method.name}</div>
                            <div className="shipping-time">{method.time}</div>
                          </div>
                          <div className="shipping-price">
                            {getTotalPrice() >= 500000 && method.id === 'standard' 
                              ? 'Mi·ªÖn ph√≠' 
                              : `${method.price.toLocaleString()}‚Ç´`}
                          </div>
                        </label>
                      ))}
                    </div>
                    {getTotalPrice() < 500000 && (
                      <p className="shipping-note">
                        üí° Mua th√™m {(500000 - getTotalPrice()).toLocaleString()}‚Ç´ ƒë·ªÉ ƒë∆∞·ª£c mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn
                      </p>
                    )}
                  </div>

                  <div className="checkout-section">
                    <h2 className="section-title">Ph∆∞∆°ng th·ª©c thanh to√°n</h2>
                    <div className="payment-methods">
                      {paymentMethods.map((method) => (
                        <label key={method.id} className="payment-option">
                          <input
                            type="radio"
                            name="paymentMethod"
                            value={method.id}
                            checked={formData.paymentMethod === method.id}
                            onChange={handleInputChange}
                          />
                          <div className="payment-info">
                            <span className="payment-icon">{method.icon}</span>
                            <span className="payment-name">{method.name}</span>
                          </div>
                        </label>
                      ))}
                    </div>
                  </div>

                  <button type="submit" className="place-order-btn">
                    ƒê·∫∑t h√†ng
                  </button>
                </form>
              </div>

              <div className="order-summary-section">
                <div className="order-summary-sticky">
                  <h2 className="section-title">ƒê∆°n h√†ng c·ªßa b·∫°n</h2>
                  
                  <div className="order-items">
                    {items.map((item) => (
                      <div key={`${item.id}-${item.size}`} className="order-item">
                        <div className="order-item-image">
                          <img src={item.image} alt={item.name} />
                          <span className="item-quantity">{item.quantity}</span>
                        </div>
                        <div className="order-item-details">
                          <h4>{item.name}</h4>
                          <p className="item-variant">Size: {item.size} | M√†u: {item.color}</p>
                          <p className="item-price">{item.price}</p>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="promo-code-section">
                    <input
                      type="text"
                      value={promoCode}
                      onChange={(e) => setPromoCode(e.target.value.toUpperCase())}
                      placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                      className="promo-input"
                    />
                    <button type="button" onClick={handleApplyPromoCode} className="apply-btn">
                      √Åp d·ª•ng
                    </button>
                  </div>

                  <div className="promo-suggestions">
                    <p className="promo-title">M√£ gi·∫£m gi√° kh·∫£ d·ª•ng:</p>
                    <div className="promo-codes">
                      <span className="promo-code-tag">CAMP50</span>
                      <span className="promo-code-tag">CAMP100</span>
                      <span className="promo-code-tag">CAMP250</span>
                    </div>
                  </div>

                  <div className="order-totals">
                    <div className="total-row">
                      <span>T·∫°m t√≠nh:</span>
                      <span>{getTotalPrice().toLocaleString()}‚Ç´</span>
                    </div>
                    <div className="total-row">
                      <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                      <span>
                        {getShippingPrice() === 0 
                          ? 'Mi·ªÖn ph√≠' 
                          : `${getShippingPrice().toLocaleString()}‚Ç´`}
                      </span>
                    </div>
                    {discount > 0 && (
                      <div className="total-row discount-row">
                        <span>Gi·∫£m gi√°:</span>
                        <span>-{discount.toLocaleString()}‚Ç´</span>
                      </div>
                    )}
                    <div className="total-row final-total">
                      <span>T·ªïng c·ªông:</span>
                      <span className="final-amount">{calculateFinalTotal().toLocaleString()}‚Ç´</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}
